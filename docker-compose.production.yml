version: '3.7'

services: 
  app:
    hostname: golang_example_production
    container_name: golang_example_production
    depends_on: 
      - postgres
      - zookeeper
      - kafka
    restart: always
    build: 
      context: .
      dockerfile: Dockerfile
      target: prod
    environment: 
      SERVING_PORT: "*:8080"
      DB_HOST: golang_example_db
      DB_PORT: 5432
      DB_NAME: golang_example_db
      DB_USER: postgres
      DB_PASS: developer
      KAFKA_HOST: kafka:9092
      GIN_MODE: release
    ports:
      - 8080:8080
    command: bash -c "go mod download && go build -o /bin/app/build/main ./src && /bin/app/build/main"
    networks: 
      - kafka
      - golang_example_production

  postgres:
    image: postgres:11
    container_name: golang_example_db
    volumes:
      - golang_example_production:/var/libs/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=developer
      - POSTGRES_DB=golang_example_db
      - POSTGRES_PORT=5432
    ports:
      - 5432:5432
    networks: 
      - golang_example_production
  
  kafka:
    image: confluentinc/cp-kafka:4.1.0
    container_name: golang_example_kafka
    depends_on: 
      - zookeeper
    environment: 
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    ports: 
      - 9092:9092
    networks: 
      - kafka
    extra_hosts: 
      kafka: 127.0.0.1
    volumes:
      - 'kafka_data:/kafka'

  zookeeper:
    image: confluentinc/cp-zookeeper:4.1.0
    container_name: golang_example_zookeeper
    environment: 
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 3
    networks: 
      - kafka
    volumes:
      - 'zookeeper_data:/zookeeper'

volumes: 
  golang_example_production:
  zookeeper_data:
  kafka_data:

networks:
  kafka:
  golang_example_production: